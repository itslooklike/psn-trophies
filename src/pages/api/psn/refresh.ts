import axios, { type AxiosError } from 'axios'
import url from 'url'
import type { NextApiRequest, NextApiResponse } from 'next'
import { tokenSet } from 'src/server/redis'
import { refreshToken, psnApi } from 'src/utils/config'
import { errorHandler } from 'src/utils/errorHandler'

// TODO: –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ (`next.config.js` - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω—É–∂–Ω–æ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ, –∞ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏)
if (!refreshToken) {
  throw new Error(`üçÖ NO REFRESH_TOKEN passed! Check '.env.local'`)
}

const config = {
  headers: {
    Authorization: `Basic MDk1MTUxNTktNzIzNy00MzcwLTliNDAtMzgwNmU2N2MwODkxOnVjUGprYTV0bnRCMktxc1A=`,
    'User-Agent': `PlayStation/21090100 CFNetwork/1126 Darwin/19.5.0`,
    'Accept-Language': `en-US`,
    // 'Content-Type': `application/x-www-form-urlencoded`,
  },
}

const urlencoded = new url.URLSearchParams()
urlencoded.append(`refresh_token`, refreshToken)
urlencoded.append(`grant_type`, `refresh_token`)
urlencoded.append(`scope`, `psn:mobile.v2.core psn:clientapp`)
urlencoded.append(`token_format`, `jwt`)

// Request failed with status code 400
// error.response.data
// type TExpiredError = {
//   error: 'invalid_grant'
//   error_description: 'Invalid refresh token'
//   error_code: 4159
//   error_uri: 'https://auth.api.sonyentertainmentnetwork.com/openapi/docs'
// }

type TResponse = {
  access_token: string
  token_type: `bearer`
  expires_in: number
  scope: `psn:clientapp psn:mobile.v1`
  id_token: string
  refresh_token_expires_in: number
}

export default async function handler(_: NextApiRequest, res: NextApiResponse) {
  try {
    const { data } = await axios.post<TResponse>(`${psnApi}/authz/v3/oauth/token`, urlencoded.toString(), config)

    await tokenSet(data.access_token)

    res.status(200).send(`ok`)
  } catch (err) {
    const error = err as Error | AxiosError

    if (axios.isAxiosError(error)) {
      if (error.response?.data.error_description === `Invalid refresh token`) {
        // –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç—É—Ç —ç—Ç—É –∏–Ω—Ñ—É, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É–ª
        // –ó–∞—á–µ–º? –ø–æ—á–µ–º—É —è –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—á—É —Å —Å–µ—Ä–≤–µ—Ä–∞?
        res.status(400).json({ message: `invalid_grant` })
        return
      }

      if (error.response?.status === 403) {
        // –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—Ñ—Ä–µ—à–Ω—É—Ç—å —Ç–æ–∫–µ–Ω??
        // TODO: –∫–∏–¥–∞—Ç—å –Ω–æ—Ç–∏—Ñ–∞–µ—Ä?
      }
    }

    errorHandler(error, `/refresh error`)

    throw error
  }
}
